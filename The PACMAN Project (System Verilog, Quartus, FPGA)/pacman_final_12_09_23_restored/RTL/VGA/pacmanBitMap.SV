// bitmap file 
// (c) Technion IIT, Department of Electrical and Computer Engineering 2023 
// generated by the automatic Python tool 
 
 
module pacmanBitMap (

					input		logic	clk, 
					input		logic	resetN, 
					input 	logic	[10:0] offsetX,	// offset from top left  position 
					input 	logic	[10:0] offsetY, 
					input		logic	InsideRectangle, 	// input that the pixel is within a bracket
					input		logic	move_down,  		// move Y down
					input		logic	move_left,   		// move X left
					input		logic	move_right,   		// move X right
					input		logic	move_up,  			// move Y up
					input		logic breakMode,			// break a wall
					input		logic wall_broke,			// wall broke
					input		logic	playGame,			// up if game if playable
					input		logic eatPulse,			// pulse to do eating animation
 
					output	logic	drawingRequest, 	// output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout,  	// rgb value from the bitmap
					output	logic break_mode,			// up if pacman is in break mode	
					output	logic	[3:0] HitEdgeCode	// one bit per edge 
); 

logic [1:0] last_move; // mem of last move
logic switchFlag; 	  // up if state switching is allowed
logic breakMode_D;     // breakMode with one clk delay
 
// this is the devider used to acess the right pixel 
localparam  int OBJECT_NUMBER_OF_Y_BITS = 5;  // 2^5 = 32 
localparam  int OBJECT_NUMBER_OF_X_BITS = 5;  // 2^5 = 32 

localparam  int OBJECT_HEIGHT_Y = 1 <<  OBJECT_NUMBER_OF_Y_BITS;
localparam  int OBJECT_WIDTH_X = 1 <<  OBJECT_NUMBER_OF_X_BITS;

// generating the bitmap
localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00;	// RGB value in the bitmap representing a transparent pixel
localparam logic [0:3][7:0] colors = {8'h00, 8'hfc, 8'h64, 8'hf4}; // colors used in bitmaps
logic[0:2][0:31][0:31][1:0] object_colors = {
  {{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0}},
 
  {{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0}},
 
  {{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h2,2'h2,2'h2,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h2,2'h2,2'h2,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h2,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h2,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h2,2'h2,2'h2,2'h3,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h3,2'h2,2'h2,2'h2,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h2,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h2,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h2,2'h2,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h2,2'h2,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h2,2'h2,2'h3,2'h3,2'h2,2'h3,2'h2,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h3,2'h3,2'h3,2'h2,2'h3,2'h2,2'h3,2'h3,2'h2,2'h2,2'h0,2'h0},
	{2'h0,2'h0,2'h2,2'h3,2'h3,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h3,2'h3,2'h2,2'h0,2'h0},
	{2'h0,2'h2,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h2,2'h0},
	{2'h2,2'h2,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h3,2'h2,2'h2},
	{2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2,2'h2},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0},
	{2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0},
	{2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h1,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0,2'h0}}
};


// state machine decleration 
enum logic [2:0] {s_idle, s_right, s_down, s_left, s_up, s_close, s_break} pacman_ps, pacman_ns;
 
//////////--------------------------------------------------------------------------------------------------------------= 
//hit bit map has one bit per edge:  hit_colors[3:0] =   {Left, Top, Right, Bottom}	 
//there is one bit per edge, in the corner two bits are set  
logic [0:3] [0:3] [3:0] hit_colors = 
		   {16'hC446,     
			16'h8C62,    
			16'h8932,
			16'h9113}; 
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin
		pacman_ps 		<= s_idle;
		RGBout 			<= 8'h00; 
		HitEdgeCode 	<= 4'h0;
		switchFlag 		<= 1'b0;
		break_mode 		<= 1'b0;
		breakMode_D	<= 1'b0;
	end 
	else begin
		// defaults
		pacman_ps <= pacman_ns;
		RGBout <= TRANSPARENT_ENCODING ; 
		HitEdgeCode <= 4'h0;
		switchFlag <= 1'b1;
		
		if(!(move_down || move_left || move_right || move_up)) // no movement
			switchFlag <= 1'b0;
		
		breakMode_D <= breakMode;
		
		if (playGame == 1'b0) // game not playable
			pacman_ps <= s_idle;
		
		if (playGame == 1'b1 && InsideRectangle == 1'b1) begin // inside an external bracket  
			HitEdgeCode <= hit_colors[offsetY >> 3][offsetX >> 3]; // get hitting edge from the colors table
			
			if (move_down) 		last_move <= 2'b00;
			else if (move_left) 	last_move <= 2'b01;
			else if (move_right) last_move <= 2'b10;
			else if (move_up) 	last_move <= 2'b11;
			
			if (pacman_ps != s_break) begin // draw pacman according to current state
				if (pacman_ps == s_idle || pacman_ps == s_close)
					RGBout <= colors[object_colors[1][offsetY][offsetX]];
				else if (pacman_ps == s_down)
					RGBout <= colors[object_colors[0][offsetX][offsetY]];
				else if (pacman_ps == s_left)
					RGBout <= colors[object_colors[0][offsetY][OBJECT_WIDTH_X - offsetX - 1]];
				else if (pacman_ps == s_right)
					RGBout <= colors[object_colors[0][offsetY][offsetX]];
				else if (pacman_ps == s_up)
					RGBout <= colors[object_colors[0][offsetX][OBJECT_HEIGHT_Y - offsetY - 1]];
				break_mode <= 1'b0;
			end
			else if (pacman_ps == s_break) begin // draw pacman in break mode
				RGBout <= colors[object_colors[2][offsetY][offsetX]];
				break_mode <= 1'b1;
			end
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------=
always_comb // Update next state and outputs
	begin
	// set all default values 
		pacman_ns = pacman_ps;
			
		case (pacman_ps)
		
			s_idle: begin
					if (move_right) pacman_ns = s_right;
					else if (move_down) pacman_ns = s_down;
					else if (move_left) pacman_ns = s_left;
					else if (move_up) pacman_ns = s_up;
					else if (breakMode & !breakMode_D) pacman_ns = s_break;
				end // idle
						
			s_right: begin
					if (eatPulse && switchFlag) pacman_ns = s_close;
					else if (move_down) pacman_ns = s_down;
					else if (move_left) pacman_ns = s_left;
					else if (move_up) pacman_ns = s_up;
					else if (breakMode & !breakMode_D) pacman_ns = s_break;
				end // right
				
			s_down: begin
					if (eatPulse && switchFlag) pacman_ns = s_close;
					else if (move_left) pacman_ns = s_left;
					else if (move_right) pacman_ns = s_right;
					else if (move_up) pacman_ns = s_up;
					else if (breakMode & !breakMode_D) pacman_ns = s_break;
				end // down
			
			s_left: begin
					if (eatPulse && switchFlag) pacman_ns = s_close;
					else if (move_down) pacman_ns = s_down;
					else if (move_right) pacman_ns = s_right;
					else if (move_up) pacman_ns = s_up;
					else if (breakMode & !breakMode_D) pacman_ns = s_break;
				end // left
			
			s_up: begin
					if (eatPulse && switchFlag) pacman_ns = s_close;
					else if (move_down) pacman_ns = s_down;
					else if (move_left) pacman_ns = s_left;
					else if (move_right) pacman_ns = s_right;
					else if (breakMode & !breakMode_D) pacman_ns = s_break;
				end // up
				
			s_close: begin
					if (eatPulse) begin
						if (last_move == 2'b00) pacman_ns = s_down;
						else if (last_move == 2'b01) pacman_ns = s_left;
						else if (last_move == 2'b11) pacman_ns = s_up;
						else pacman_ns = s_right;
					end
					else if (breakMode & !breakMode_D) pacman_ns = s_break;
				end // close
				
			s_break: begin
					if ((breakMode & !breakMode_D) || wall_broke) pacman_ns = s_close;
				end // break
		endcase
	end // always comb

//////////--------------------------------------------------------------------------------------------------------------=	
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
